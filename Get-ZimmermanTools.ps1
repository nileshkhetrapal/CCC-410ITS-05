<#
.SYNOPSIS
    This script will discover and download all available programs from https://ericzimmerman.github.io and download them to $Dest
.DESCRIPTION
    A file will also be created in $Dest that tracks the SHA-1 of each file, so rerunning the script will only download new versions. To redownload, remove lines from or delete the CSV file created under $Dest and rerun.
.PARAMETER Dest
    The path you want to save the programs to.
.PARAMETER NetVersion
    Which .net version to get. Default is both net 4.x and net 6.0 builds. Specify 4 or 6 to only get tools built against that version of .net
.EXAMPLE
    C:\PS> Get-ZimmermanTools.ps1 -Dest c:\tools
    Downloads/extracts and saves details about programs to c:\tools directory.
.NOTES
    Author: Eric Zimmerman
    Date:   January 22, 2021    
#>

[CmdletBinding(DefaultParameterSetName = "NoProxy")]
Param
(
	[Parameter()]
	[string]$Dest = (Resolve-Path "."),
	#Where to save programs to
	[Parameter()]
	[int]$NetVersion = (0),
	#Which version of .net build to get
	#Specifies a proxy server for the request, rather than connecting directly to the Internet resource. Enter the URI of a network proxy server.
	[Parameter(Mandatory = $true,
			   ParameterSetName = "ProxyAlone")]
	[Parameter(Mandatory = $true,
			   ParameterSetName = "ProxyWithCreds")]
	[Parameter(Mandatory = $true,
			   ParameterSetName = "ProxyDefaultCreds")]
	[string]$Proxy,
	#Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter.
	#Type a user name, such as "User01" or "Domain01\User01", or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
	#This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the ProxyCredential and ProxyUseDefaultCredentials parameters in the same command.
	[Parameter(Mandatory = $true,
			   ParameterSetName = "ProxyWithCreds")]
	[pscredential]$ProxyCredential,
	#Indicates that the cmdlet uses the credentials of the current user to access the proxy server that is specified by the Proxy parameter.
	#This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the ProxyCredential and ProxyUseDefaultCredentials parameters in the same command.
	[Parameter(Mandatory = $true,
			   ParameterSetName = "ProxyDefaultCreds")]
	[switch]$ProxyUseDefaultCredentials
	
)


function Write-Color
{
    <#
	.SYNOPSIS
        Write-Color is a wrapper around Write-Host.
        It provides:
        - Easy manipulation of colors,
        - Logging output to file (log)
        - Nice formatting options out of the box.
	.DESCRIPTION
        Author: przemyslaw.klys at evotec.pl
        Project website: https://evotec.xyz/hub/scripts/write-color-ps1/
        Project support: https://github.com/EvotecIT/PSWriteColor
        Original idea: Josh (https://stackoverflow.com/users/81769/josh)
	.EXAMPLE
    Write-Color -Text "Red ", "Green ", "Yellow " -Color Red,Green,Yellow
    .EXAMPLE
	Write-Color -Text "This is text in Green ",
					"followed by red ",
					"and then we have Magenta... ",
					"isn't it fun? ",
					"Here goes DarkCyan" -Color Green,Red,Magenta,White,DarkCyan
    .EXAMPLE
	Write-Color -Text "This is text in Green ",
					"followed by red ",
					"and then we have Magenta... ",
					"isn't it fun? ",
                    "Here goes DarkCyan" -Color Green,Red,Magenta,White,DarkCyan -StartTab 3 -LinesBefore 1 -LinesAfter 1
    .EXAMPLE
	Write-Color "1. ", "Option 1" -Color Yellow, Green
	Write-Color "2. ", "Option 2" -Color Yellow, Green
	Write-Color "3. ", "Option 3" -Color Yellow, Green
	Write-Color "4. ", "Option 4" -Color Yellow, Green
	Write-Color "9. ", "Press 9 to exit" -Color Yellow, Gray -LinesBefore 1
    .EXAMPLE
	Write-Color -LinesBefore 2 -Text "This little ","message is ", "written to log ", "file as well." `
				-Color Yellow, White, Green, Red, Red -LogFile "C:\testing.txt" -TimeFormat "yyyy-MM-dd HH:mm:ss"
	Write-Color -Text "This can get ","handy if ", "want to display things, and log actions to file ", "at the same time." `
				-Color Yellow, White, Green, Red, Red -LogFile "C:\testing.txt"
    .EXAMPLE
    # Added in 0.5
    Write-Color -T "My text", " is ", "all colorful" -C Yellow, Red, Green -B Green, Green, Yellow
    wc -t "my text" -c yellow -b green
    wc -text "my text" -c red
    .NOTES
        Additional Notes:
        - TimeFormat https://msdn.microsoft.com/en-us/library/8kb3ddd4.aspx
    #>
	[alias('Write-Colour')]
	[CmdletBinding()]
	param (
		[alias ('T')]
		[String[]]$Text,
		[alias ('C', 'ForegroundColor', 'FGC')]
		[ConsoleColor[]]$Color = [ConsoleColor]::White,
		[alias ('B', 'BGC')]
		[ConsoleColor[]]$BackGroundColor = $null,
		[alias ('Indent')]
		[int]$StartTab = 0,
		[int]$LinesBefore = 0,
		[int]$LinesAfter = 0,
		[int]$StartSpaces = 0,
		[alias ('L')]
		[string]$LogFile = '',
		[Alias('DateFormat', 'TimeFormat')]
		[string]$DateTimeFormat = 'yyyy-MM-dd HH:mm:ss',
		[alias ('LogTimeStamp')]
		[bool]$LogTime = $true,
		[int]$LogRetry = 2,
		[ValidateSet('unknown', 'string', 'unicode', 'bigendianunicode', 'utf8', 'utf7', 'utf32', 'ascii', 'default', 'oem')]
		[string]$Encoding = 'Unicode',
		[switch]$ShowTime,
		[switch]$NoNewLine
	)
	$DefaultColor = $Color[0]
	if ($null -ne $BackGroundColor -and $BackGroundColor.Count -ne $Color.Count)
	{
		Write-Error "Colors, BackGroundColors parameters count doesn't match. Terminated."
		return
	}
	#if ($Text.Count -eq 0) { return }
	if ($LinesBefore -ne 0) { for ($i = 0; $i -lt $LinesBefore; $i++) { Write-Host -Object "`n" -NoNewline } } # Add empty line before
	if ($StartTab -ne 0) { for ($i = 0; $i -lt $StartTab; $i++) { Write-Host -Object "`t" -NoNewline } } # Add TABS before text
	if ($StartSpaces -ne 0) { for ($i = 0; $i -lt $StartSpaces; $i++) { Write-Host -Object ' ' -NoNewline } } # Add SPACES before text
	if ($ShowTime) { Write-Host -Object "[$([datetime]::Now.ToString($DateTimeFormat))] " -NoNewline } # Add Time before output
	if ($Text.Count -ne 0)
	{
		if ($Color.Count -ge $Text.Count)
		{
			# the real deal coloring
			if ($null -eq $BackGroundColor)
			{
				for ($i = 0; $i -lt $Text.Length; $i++) { Write-Host -Object $Text[$i] -ForegroundColor $Color[$i] -NoNewline }
			}
			else
			{
				for ($i = 0; $i -lt $Text.Length; $i++) { Write-Host -Object $Text[$i] -ForegroundColor $Color[$i] -BackgroundColor $BackGroundColor[$i] -NoNewline }
			}
		}
		else
		{
			if ($null -eq $BackGroundColor)
			{
				for ($i = 0; $i -lt $Color.Length; $i++) { Write-Host -Object $Text[$i] -ForegroundColor $Color[$i] -NoNewline }
				for ($i = $Color.Length; $i -lt $Text.Length; $i++) { Write-Host -Object $Text[$i] -ForegroundColor $DefaultColor -NoNewline }
			}
			else
			{
				for ($i = 0; $i -lt $Color.Length; $i++) { Write-Host -Object $Text[$i] -ForegroundColor $Color[$i] -BackgroundColor $BackGroundColor[$i] -NoNewline }
				for ($i = $Color.Length; $i -lt $Text.Length; $i++) { Write-Host -Object $Text[$i] -ForegroundColor $DefaultColor -BackgroundColor $BackGroundColor[0] -NoNewline }
			}
		}
	}
	if ($NoNewLine -eq $true) { Write-Host -NoNewline }
	else { Write-Host } # Support for no new line
	if ($LinesAfter -ne 0) { for ($i = 0; $i -lt $LinesAfter; $i++) { Write-Host -Object "`n" -NoNewline } } # Add empty line after
	if ($Text.Count -and $LogFile)
	{
		# Save to file
		$TextToFile = ""
		for ($i = 0; $i -lt $Text.Length; $i++)
		{
			$TextToFile += $Text[$i]
		}
		$Saved = $false
		$Retry = 0
		Do
		{
			$Retry++
			try
			{
				if ($LogTime)
				{
					"[$([datetime]::Now.ToString($DateTimeFormat))] $TextToFile" | Out-File -FilePath $LogFile -Encoding $Encoding -Append -ErrorAction Stop -WhatIf:$false
				}
				else
				{
					"$TextToFile" | Out-File -FilePath $LogFile -Encoding $Encoding -Append -ErrorAction Stop -WhatIf:$false
				}
				$Saved = $true
			}
			catch
			{
				if ($Saved -eq $false -and $Retry -eq $LogRetry)
				{
					$PSCmdlet.WriteError($_)
				}
				else
				{
					Write-Warning "Write-Color - Couldn't write to log file $($_.Exception.Message). Retrying... ($Retry/$LogRetry)"
				}
			}
		}
		Until ($Saved -eq $true -or $Retry -ge $LogRetry)
	}
}

#Setup proxy information for Invoke-WebRequest
[hashtable]$IWRProxyConfig = @{ }

if ($Proxy)
{
	$IWRProxyConfig.Add("Proxy", $Proxy)
}
if ($ProxyCredential)
{
	$IWRProxyConfig.Add("ProxyCredential", $ProxyCredential)
}
if ($ProxyUseDefaultCredentials)
{
	$IWRProxyConfig.Add("ProxyUseDefaultCredentials", $true)
}


Write-Color -LinesBefore 1 "This script will discover and download all available programs" -BackgroundColor Blue
Write-Color "from https://ericzimmerman.github.io and download them to $Dest" -BackgroundColor Blue -LinesAfter 1
Write-Color "A file will also be created in $Dest that tracks the SHA-1 of each file,"
Write-Color "so rerunning the script will only download new versions."
Write-Color -LinesBefore 1 -Text "To redownload, remove lines from or delete the CSV file created under $Dest and rerun. Enjoy!"

Write-Color -LinesBefore 1 -Text "Use -NetVersion to control which version of the software you get (4 or 6). Default is getting both versions" -LinesAfter 1 -BackgroundColor Green

$TestColor = (Get-Host).ui.rawui.ForegroundColor
if ($TestColor -eq -1)
{
	$defaultColor = [ConsoleColor]::Gray
}
else
{
	$defaultColor = $TestColor
}

$newInstall = $false

if (!(Test-Path -Path $Dest))
{
	Write-Color -Text "* ", "$Dest does not exist. Creating..." -Color Green, $defaultColor
	New-Item -ItemType directory -Path $Dest > $null
	
	$newInstall = $true
}

$URL = "https://raw.githubusercontent.com/EricZimmerman/ericzimmerman.github.io/master/index.md"

$WebKeyCollection = @()

$localDetailsFile = Join-Path $Dest -ChildPath "!!!RemoteFileDetails.csv"

if (Test-Path -Path $localDetailsFile)
{
	Write-Color -Text "* ", "Loading local details from '$Dest'..." -Color Green, $defaultColor
	$LocalKeyCollection = Import-Csv -Path $localDetailsFile
}

$toDownload = @()

#Get zips
$progressPreference = 'silentlyContinue'
$PageContent = (Invoke-WebRequest @IWRProxyConfig -Uri $URL -UseBasicParsing).Content
$progressPreference = 'Continue'

$regex = [regex] '(?i)\b(https)://[-A-Z0-9+&@#/%?=~_|$!:,.;]*[A-Z0-9+&@#/%=~_|$].(zip|txt)'
$matchdetails = $regex.Match($PageContent)


$uniqueUrlhash = @{ }


Write-Color -Text "* ", "Getting available programs..." -Color Green, $defaultColor
$progressPreference = 'silentlyContinue'
while ($matchdetails.Success)
{
	
	if ($matchdetails.Value.EndsWith('All.zip'))
	{
		$matchdetails = $matchdetails.NextMatch()
		continue
	}
	
	if ($matchdetails.Value.EndsWith('All_6.zip'))
	{
		$matchdetails = $matchdetails.NextMatch()
		continue
	}
	
	
	if ($uniqueUrlhash.Contains($matchdetails.Value))
	{
		$matchdetails = $matchdetails.NextMatch()
		continue
	}
	
	#Write-Host $matchdetails.Value
	
	$uniqueUrlhash.Add($matchdetails.Value, $matchdetails.Value)
	
	$isnet6 = $false
	
	if ($NetVersion -eq 4)
	{
		if (!$matchdetails.Value.EndsWith("Get-ZimmermanTools.zip") -and $matchdetails.Value.Contains('/net6/'))
		{
			$matchdetails = $matchdetails.NextMatch()
			continue
		}
	}
	
	if ($NetVersion -eq 6)
	{
		if (!$matchdetails.Value.EndsWith("Get-ZimmermanTools.zip") -and !$matchdetails.Value.Contains('/net6/'))
		{
			$matchdetails = $matchdetails.NextMatch()
			continue
		}
	}
	
	$isnet6 = $matchdetails.Value.Contains('/net6/')
	
	#Write-Host $matchdetails.Value
	
	$headers = (Invoke-WebRequest @IWRProxyConfig -Uri $matchdetails.Value -UseBasicParsing -Method Head).Headers
	
	#Check if net version is set and act accordingly
	#https://f001.backblazeb2.com/file/EricZimmermanTools/AmcacheParser.zip
	#https://f001.backblazeb2.com/file/EricZimmermanTools/net6/AmcacheParser_6.zip
	
	$getUrl = $matchdetails.Value
	$sha = $headers["x-bz-content-sha1"]
	$name = $headers["x-bz-file-name"]
	
	if ($isnet6)
	{
		$name = Split-Path $name -leaf
	}
	
	$size = $headers["Content-Length"]
	
	$details = @{
		Name = [string]$name
		SHA1 = [string]$sha
		URL  = [string]$getUrl
		Size = [string]$size
		IsNet6 = [bool]$isnet6
	}
	
	$webKeyCollection += New-Object PSObject -Property $details
	
	$matchdetails = $matchdetails.NextMatch()
}
$progressPreference = 'Continue'

Foreach ($webKey in $webKeyCollection)
{
	if ($newInstall)
	{
		$toDownload += $webKey
		continue
	}
	
	$localFile = $LocalKeyCollection | Where-Object { $_.URL -eq $webKey.URL }
	
	if ($null -eq $localFile -or $localFile.SHA1 -ne $webKey.SHA1)
	{
		#Needs to be downloaded since SHA is different or it doesnt exist
		$toDownload += $webKey
	}
}

if ($toDownload.Count -eq 0)
{
	Write-Color -LinesBefore 1 -Text "* ", "All files current. Exiting." -Color Green, Blue -LinesAfter 1
	return
}

$downloadedOK = @()

$destFile = ""
$name = ""

$i = 0
$dlCount = $toDownload.Count
Write-Color -Text "* ", "Files to download: $dlCount" -Color Green, $defaultColor
foreach ($td in $toDownload)
{
	$p = [math]::round(($i/$toDownload.Count) * 100, 2)
	
	#Write-Host ($td | Format-Table | Out-String)
	
	$tempDest = $Dest
	
	try
	{
		$dUrl = $td.URL
		$size = $td.Size -as [long]
		$name = $td.Name
		$is6 = $td.IsNet6
		
		if ($is6)
		{
			$tempDest = Join-Path $tempDest "net6"
			if (!(Test-Path -Path $tempDest))
			{
				Write-Color -Text "* ", "$tempDest does not exist. Creating..." -Color Green, $defaultColor
				New-Item -ItemType directory -Path $tempDest > $null
			}
		}
		
		Write-Progress -Activity "Updating programs...." -Status "$p% Complete" -PercentComplete $p -CurrentOperation "Downloading $name"
		$destFile = [IO.Path]::Combine($tempDest, $name)
		
		$progressPreference = 'silentlyContinue'
		Invoke-WebRequest @IWRProxyConfig -Uri $dUrl -OutFile $destFile -ErrorAction:Stop -UseBasicParsing
		
		$extraInfo = ""
		if ($is6)
		{
			$extraInfo = " (net 6)"
		}
		
		$sizeNice = '{0:N0}' -f $size
		
		Write-Color -Text "* ", "Downloaded $name (Size: $sizeNice)", $extraInfo -Color Green, Blue, Red
		
		if ($name.endswith("zip"))
		{
			
			Expand-Archive -Path $destFile -DestinationPath $tempDest -Force
		}
		
		$downloadedOK += $td
	}
	catch
	{
		$ErrorMessage = $_.Exception.Message
		Write-Color -Text "* ", "Error downloading $name ($ErrorMessage). Wait for the run to finish and try again by repeating the command" -Color Green, Red
	}
	finally
	{
		$progressPreference = 'Continue'
		if ($name.endswith("zip"))
		{
			remove-item -Path $destFile
		}
		
	}
	$i += 1
}

#Write-Host ($webKeyCollection | Format-Table | Out-String)

#Downloaded ok contains new stuff, but we need to account for existing stuff too
foreach ($webItems in $webKeyCollection)
{
	#Check what we have locally to see if it also contains what is in the web collection
	$localFile = $LocalKeyCollection | Where-Object { $_.SHA1 -eq $webItems.SHA1 }
	
	#if its not null, we have a local file match against what is on the website, so its ok
	
	if ($null -ne $localFile)
	{
		#consider it downloaded since SHAs match
		$downloadedOK += $webItems
	}
}


Write-Color -LinesBefore 1 -Text "* ", "Saving downloaded version information to $localDetailsFile" -Color Green, $defaultColor -LinesAfter 1

$downloadedOK | export-csv -Path $localDetailsFile

# SIG # Begin signature block
# MIIsvwYJKoZIhvcNAQcCoIIssDCCLKwCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCDaeVJtQPehCSHY
# 5/+6tgubHgi0Hud7JTgGPV0YKqzhuqCCJpYwggNfMIICR6ADAgECAgsEAAAAAAEh
# WFMIojANBgkqhkiG9w0BAQsFADBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3Qg
# Q0EgLSBSMzETMBEGA1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2ln
# bjAeFw0wOTAzMTgxMDAwMDBaFw0yOTAzMTgxMDAwMDBaMEwxIDAeBgNVBAsTF0ds
# b2JhbFNpZ24gUm9vdCBDQSAtIFIzMRMwEQYDVQQKEwpHbG9iYWxTaWduMRMwEQYD
# VQQDEwpHbG9iYWxTaWduMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
# zCV2kHkGeCIW9cCDtoTKKJ79BXYRxa2IcvxGAkPHsoqdBF8kyy5L4WCCRuFSqwyB
# R3Bs3WTR6/Usow+CPQwrrpfXthSGEHm7OxOAd4wI4UnSamIvH176lmjfiSeVOJ8G
# 1z7JyyZZDXPesMjpJg6DFcbvW4vSBGDKSaYo9mk79svIKJHlnYphVzesdBTcdOA6
# 7nIvLpz70Lu/9T0A4QYz6IIrrlOmOhZzjN1BDiA6wLSnoemyT5AuMmDpV8u5BJJo
# aOU4JmB1sp93/5EU764gSfytQBVI0QIxYRleuJfvrXe3ZJp6v1/BE++bYvsNbOBU
# aRapA9pu6YOTcXbGaYWCFwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0T
# AQH/BAUwAwEB/zAdBgNVHQ4EFgQUj/BLf6guRSSuTVD6Y5qL3uLdG7wwDQYJKoZI
# hvcNAQELBQADggEBAEtA28BQqv7IDO/3llRFSbuWAAlBrLMThoYoBzPKa+Z0uboA
# La6kCtP18fEPir9zZ0qDx0R7eOCvbmxvAymOMzlFw47kuVdsqvwSluxTxi3kJGy5
# lGP73FNoZ1Y+g7jPNSHDyWj+ztrCU6rMkIrp8F1GjJXdelgoGi8d3s0AN0GP7URt
# 11Mol37zZwQeFdeKlrTT3kwnpEwbc3N29BeZwh96DuMtCK0KHCz/PKtVDg+Rfjbr
# w1dJvuEuLXxgi8NBURMjnc73MmuUAaiZ5ywzHzo7JdKGQM47LIZ4yWEvFLru21Vv
# 34TuBQlNvSjYcs7TYlBlHuuSl4Mx2bO1ykdYP18wggVDMIIEK6ADAgECAhEA6EYz
# Lb7R2bgb4DfZjiC8nDANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJHQjEbMBkG
# A1UECBMSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRgwFgYD
# VQQKEw9TZWN0aWdvIExpbWl0ZWQxJDAiBgNVBAMTG1NlY3RpZ28gUlNBIENvZGUg
# U2lnbmluZyBDQTAeFw0xOTEyMjUwMDAwMDBaFw0yMzAzMjQyMzU5NTlaMIGSMQsw
# CQYDVQQGEwJVUzEOMAwGA1UEEQwFNDYwNDAxCzAJBgNVBAgMAklOMRAwDgYDVQQH
# DAdGaXNoZXJzMRwwGgYDVQQJDBMxNTY3MiBQcm92aW5jaWFsIExuMRowGAYDVQQK
# DBFFcmljIFIuIFppbW1lcm1hbjEaMBgGA1UEAwwRRXJpYyBSLiBaaW1tZXJtYW4w
# ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC1TaCLHpBXMOD5gEMM3JmP
# WQ8XA8OFNuiMS6nbjHezBY0IjXg/h0wKzpIoNQ+YqF7yTloum/15pyyDKd3JiStx
# IYULBTBtOd62ufyXM4W7ndXPiyMUgyWYpVI98oTsYGgFwnyNPcsqgHtjNkXqSGhB
# jzh84k806Puyd8TE3rgnopVCUOyA6MvBjvbSbxs39Gf5Wn4UFcfJQiMeGG9v6jb3
# EWZ6bHN9NZeEMzaghfiRG4X9mZ+j2Xyfcn6I4Ev8iIhVOLrxp1jGrezQBLGCtDgc
# 7e94aDM1n0pIHWW1fI1Uay0iciz5Rk+UrKfB5FAk7lxzvMrrixKi2ODCVxpB0EAd
# AgMBAAGjggGnMIIBozAfBgNVHSMEGDAWgBQO4TqoUzox1Yq+wbutZxoDha00DjAd
# BgNVHQ4EFgQUaxGbua3CJYKHwxIRsRdPCO1yvK8wDgYDVR0PAQH/BAQDAgeAMAwG
# A1UdEwEB/wQCMAAwEwYDVR0lBAwwCgYIKwYBBQUHAwMwEQYJYIZIAYb4QgEBBAQD
# AgQQMEAGA1UdIAQ5MDcwNQYMKwYBBAGyMQECAQMCMCUwIwYIKwYBBQUHAgEWF2h0
# dHBzOi8vc2VjdGlnby5jb20vQ1BTMEMGA1UdHwQ8MDowOKA2oDSGMmh0dHA6Ly9j
# cmwuc2VjdGlnby5jb20vU2VjdGlnb1JTQUNvZGVTaWduaW5nQ0EuY3JsMHMGCCsG
# AQUFBwEBBGcwZTA+BggrBgEFBQcwAoYyaHR0cDovL2NydC5zZWN0aWdvLmNvbS9T
# ZWN0aWdvUlNBQ29kZVNpZ25pbmdDQS5jcnQwIwYIKwYBBQUHMAGGF2h0dHA6Ly9v
# Y3NwLnNlY3RpZ28uY29tMB8GA1UdEQQYMBaBFGVyaWNAbWlrZXN0YW1tZXIuY29t
# MA0GCSqGSIb3DQEBCwUAA4IBAQCFf//EsGF8t/hfY49q+Gn8CWaemRBTzIhm/wON
# VAonSPxiHEKUgCDK5Jv/r6r6eM6zEydkOgIA+XMbQ/vh7WdhOLDdt4bp4+ve4Nz0
# +NQHEOIeDGUjr2aVdh2OICKtxXlnyJRNyaon0umdNyu+2ZAC83WV2hJbiGYcgm5X
# Rcs6G8CVRG48zX8L2WHQrrmcffBgihT/SkQuUN8h1TEva84ucSXEK/TPTsd/3LD7
# eCtYclvnhWazqj/FjFmCoK7TYMfSrV8qs0HC0OQsoo5sEXnjADst1oMZuXcIldBV
# GaCiRwMj+LOZknEcAd5t1uPjNUXII0OwxHJKZtH6bnyr+O/cMIIFRzCCBC+gAwIB
# AgINAfJAQkDO/SLb6Wxx/DANBgkqhkiG9w0BAQwFADBMMSAwHgYDVQQLExdHbG9i
# YWxTaWduIFJvb3QgQ0EgLSBSMzETMBEGA1UEChMKR2xvYmFsU2lnbjETMBEGA1UE
# AxMKR2xvYmFsU2lnbjAeFw0xOTAyMjAwMDAwMDBaFw0yOTAzMTgxMDAwMDBaMEwx
# IDAeBgNVBAsTF0dsb2JhbFNpZ24gUm9vdCBDQSAtIFI2MRMwEQYDVQQKEwpHbG9i
# YWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWduMIICIjANBgkqhkiG9w0BAQEFAAOC
# Ag8AMIICCgKCAgEAlQfoc8pm+ewUyns89w0I8bRFCyyCtEjG61s8roO4QZIzFKRv
# f+kqzMawiGvFtonRxrL/FM5RFCHsSt0bWsbWh+5NOhUG7WRmC5KAykTec5RO86eJ
# f094YwjIElBtQmYvTbl5KE1SGooagLcZgQ5+xIq8ZEwhHENo1z08isWyZtWQmrcx
# BsW+4m0yBqYe+bnrqqO4v76CY1DQ8BiJ3+QPefXqoh8q0nAue+e8k7ttU+JIfIwQ
# Bzj/ZrJ3YX7g6ow8qrSk9vOVShIHbf2MsonP0KBhd8hYdLDUIzr3XTrKotudCd5d
# RC2Q8YHNV5L6frxQBGM032uTGL5rNrI55KwkNrfw77YcE1eTtt6y+OKFt3OiuDWq
# RfLgnTahb1SK8XJWbi6IxVFCRBWU7qPFOJabTk5aC0fzBjZJdzC8cTflpuwhCHX8
# 5mEWP3fV2ZGXhAps1AJNdMAU7f05+4PyXhShBLAL6f7uj+FuC7IIs2FmCWqxBjpl
# llnA8DX9ydoojRoRh3CBCqiadR2eOoYFAJ7bgNYl+dwFnidZTHY5W+r5paHYgw/R
# /98wEfmFzzNI9cptZBQselhP00sIScWVZBpjDnk99bOMylitnEJFeW4OhxlcVLFl
# tr+Mm9wT6Q1vuC7cZ27JixG1hBSKABlwg3mRl5HUGie/Nx4yB9gUYzwoTK8CAwEA
# AaOCASYwggEiMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1Ud
# DgQWBBSubAWjkxPioufi1xzWx/B/yGdToDAfBgNVHSMEGDAWgBSP8Et/qC5FJK5N
# UPpjmove4t0bvDA+BggrBgEFBQcBAQQyMDAwLgYIKwYBBQUHMAGGImh0dHA6Ly9v
# Y3NwMi5nbG9iYWxzaWduLmNvbS9yb290cjMwNgYDVR0fBC8wLTAroCmgJ4YlaHR0
# cDovL2NybC5nbG9iYWxzaWduLmNvbS9yb290LXIzLmNybDBHBgNVHSAEQDA+MDwG
# BFUdIAAwNDAyBggrBgEFBQcCARYmaHR0cHM6Ly93d3cuZ2xvYmFsc2lnbi5jb20v
# cmVwb3NpdG9yeS8wDQYJKoZIhvcNAQEMBQADggEBAEmsXsWD81rLYSpNl0oVKZ/k
# FJCqCfnEep81GIoKMxVtcociTkE/bQqeGK7b4l/8ldEsmBQ7jsHwNll5842Bz3T2
# GKTk4WjP739lWULpylU5vNPFJu5xOPrXIQMPt07ZW2BqQ7R9CdBgYd2q7QBeTjIe
# 4LJsnjyywruY05B2ammtGtyoidpYT9LCizJKzlT7OOk7Bwt1ChHbC3wlJ/GsJs8R
# U+bcxuJhNTL0zt2D4xk668Joo3IAyCQ8TrhTPLEXq+Y1LPnTQinmX2ADrEJhprFX
# ajNC3zUxhso+NyvaxNok9U4S8ra5t0fquyCtYRa3oDPjLYmnvLM8AX8jGoAJNOkw
# ggXeMIIDxqADAgECAhAB/W0w/KPKUagbvGQONQMtMA0GCSqGSIb3DQEBDAUAMIGI
# MQswCQYDVQQGEwJVUzETMBEGA1UECBMKTmV3IEplcnNleTEUMBIGA1UEBxMLSmVy
# c2V5IENpdHkxHjAcBgNVBAoTFVRoZSBVU0VSVFJVU1QgTmV0d29yazEuMCwGA1UE
# AxMlVVNFUlRydXN0IFJTQSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0xMDAy
# MDEwMDAwMDBaFw0zODAxMTgyMzU5NTlaMIGIMQswCQYDVQQGEwJVUzETMBEGA1UE
# CBMKTmV3IEplcnNleTEUMBIGA1UEBxMLSmVyc2V5IENpdHkxHjAcBgNVBAoTFVRo
# ZSBVU0VSVFJVU1QgTmV0d29yazEuMCwGA1UEAxMlVVNFUlRydXN0IFJTQSBDZXJ0
# aWZpY2F0aW9uIEF1dGhvcml0eTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoC
# ggIBAIASZRc2DsPbCLPQrFcNdu3NJ9NMrVCDYeKqIE0JLWQJ3M6Jn8w9qez2z8Hc
# 8dOx1ns3KBErR9o5xrw6GbRfpr19naNjQrZ28qk7K5H44m/Q7BYgkAk+4uh0yRi0
# kdRiZNt/owbxiBhqkCI8vP4T8IcUe/bkH47U5FHGEWdGCFHLhhRUP7wz/n5snP8W
# nRi9UY41pqdmyHJn2yFmsdSbeAPAUDrozPDcvJ5M/q8FljUfV1q3/875PbcstvZU
# 3cjnEjpNrkyKt1yatLcgPcp/IjSufjtoZgFE5wFORlObM2D3lL5TN5BzQ/Myw1Pv
# 26r+dE5px2uMYJPexMcM3+EyrsyTO1F4lWeL7j1W/gzQaQ8bD/MlJmszbfduR/pz
# Q+V+DqVmsSl8MoRjVYnEDcGTVDAZE6zTfTen6106bDVc20HXEtqpSQvf2ICKCZNi
# jrVmzyWIzYS4sT+kOQ/ZAp7rEkyVfPNrBaleFoPMuGfi6BOdzFuC00yz7Vv/3uVz
# rCM7LQC/NVV0CUnYSVgaf5I25lGSDvMmfRxNF7zJ7EMm0L9BX0CpRET0medXh55Q
# H1dUqD79dGMvsVBlCeZYQi5DGky08CVHWfoEHpPUJkZKUIGy3r54t/xnFeHJV4Qe
# D2PW6WK61l9VLupcxigIBCU5uA4rqfJMlxwHPw1S9e3vL4IPAgMBAAGjQjBAMB0G
# A1UdDgQWBBRTeb9aqitKz1SA4dibwJ3ysgNmyzAOBgNVHQ8BAf8EBAMCAQYwDwYD
# VR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQwFAAOCAgEAXNR8Dc/3AX1BmWUMc8VS
# n8v4z5kGfxvaQxWfngJVV5YU8VI8J4eUKO0fOgE3onb8U1DAhJvGa066jCFPoo5V
# YpHzaRXYvIjjxKoL/e+o6UtVKgYgbVV4KRnuXzBcSyQRVf8kmm5eKivuC02ff/cB
# OJQUlUMHCftgqe4cqxKMoJpep5hqWW2LPwj7yNFFrxgVZJASD3MoLsXiJE78WOzw
# 9EX+IrPrL47S2UVhBcGXb6h2co+LjDavvw0FznGN5qZvH2ymcWLF2NCDcgzxZxGJ
# DJwTTHI037zVcd+qcd3huWyMPBJdZdq9VxK2Q2v/5d5NZhFRz5mu7Be26HGRjN5J
# /t01caIVJ5Qcz2HjJrtvo2clIV3m3R0LLmgbO4Kv7INnhdSYUXSxuZmAif9/eBlc
# eUpgLpJArkw3KizJx2LIDl33NlvK4CUlAbTdGgecdwA/0NzV7D3U+rs/zIXWb3+p
# Ld+5Avf1l5q1NdrDZ7CHSqkoniOO/1wna+GwT/MH7gAu1FmHy1JBler0R9fuZEFV
# fI1ZApXdYp3Cue5aKHSEpZu3kMcMB9/1iTZ0MtYowbCwC+CcTMMc1vzjabVHRoEv
# ooKr02NEcMSN/y0zuq2Pe7VwiK4+Gc9AKNj8yJC7XZki9VLmWMUfiDFD7ogd18aO
# PENqHacY3n09FvFi+cqQqP0wggX1MIID3aADAgECAhAdokgwb5smGNCC4JZ9M9Nq
# MA0GCSqGSIb3DQEBDAUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKTmV3IEpl
# cnNleTEUMBIGA1UEBxMLSmVyc2V5IENpdHkxHjAcBgNVBAoTFVRoZSBVU0VSVFJV
# U1QgTmV0d29yazEuMCwGA1UEAxMlVVNFUlRydXN0IFJTQSBDZXJ0aWZpY2F0aW9u
# IEF1dGhvcml0eTAeFw0xODExMDIwMDAwMDBaFw0zMDEyMzEyMzU5NTlaMHwxCzAJ
# BgNVBAYTAkdCMRswGQYDVQQIExJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAOBgNVBAcT
# B1NhbGZvcmQxGDAWBgNVBAoTD1NlY3RpZ28gTGltaXRlZDEkMCIGA1UEAxMbU2Vj
# dGlnbyBSU0EgQ29kZSBTaWduaW5nIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
# MIIBCgKCAQEAhiKNMoV6GJ9J8JYvYwgeLdx8nxTP4ya2JWYpQIZURnQxYsUQ7bKH
# J6aZy5UwwFb1pHXGqQ5QYqVRkRBq4Etirv3w+Bisp//uLjMg+gwZiahse60Aw2Gh
# 3GllbR9uJ5bXl1GGpvQn5Xxqi5UeW2DVftcWkpwAL2j3l+1qcr44O2Pej79uTEFd
# EiAIWeg5zY/S1s8GtFcFtk6hPldrH5i8xGLWGwuNx2YbSp+dgcRyQLXiX+8LRf+j
# zhemLVWwt7C8VGqdvI1WU8bwunlQSSz3A7n+L2U18iLqLAevRtn5RhzcjHxxKPP+
# p8YU3VWRbooRDd8GJJV9D6ehfDrahjVh0wIDAQABo4IBZDCCAWAwHwYDVR0jBBgw
# FoAUU3m/WqorSs9UgOHYm8Cd8rIDZsswHQYDVR0OBBYEFA7hOqhTOjHVir7Bu61n
# GgOFrTQOMA4GA1UdDwEB/wQEAwIBhjASBgNVHRMBAf8ECDAGAQH/AgEAMB0GA1Ud
# JQQWMBQGCCsGAQUFBwMDBggrBgEFBQcDCDARBgNVHSAECjAIMAYGBFUdIAAwUAYD
# VR0fBEkwRzBFoEOgQYY/aHR0cDovL2NybC51c2VydHJ1c3QuY29tL1VTRVJUcnVz
# dFJTQUNlcnRpZmljYXRpb25BdXRob3JpdHkuY3JsMHYGCCsGAQUFBwEBBGowaDA/
# BggrBgEFBQcwAoYzaHR0cDovL2NydC51c2VydHJ1c3QuY29tL1VTRVJUcnVzdFJT
# QUFkZFRydXN0Q0EuY3J0MCUGCCsGAQUFBzABhhlodHRwOi8vb2NzcC51c2VydHJ1
# c3QuY29tMA0GCSqGSIb3DQEBDAUAA4ICAQBNY1DtRzRKYaTb3moqjJvxAAAeHWJ7
# Otcywvaz4GOz+2EAiJobbRAHBE++uOqJeCLrD0bs80ZeQEaJEvQLd1qcKkE6/Nb0
# 6+f3FZUzw6GDKLfeL+SU94Uzgy1KQEi/msJPSrGPJPSzgTfTt2SwpiNqWWhSQl//
# BOvhdGV5CPWpk95rcUCZlrp48bnI4sMIFrGrY1rIFYBtdF5KdX6luMNstc/fSnmH
# XMdATWM19jDTz7UKDgsEf6BLrrujpdCEAJM+U100pQA1aWy+nyAlEA0Z+1CQYb45
# j3qOTfafDh7+B1ESZoMmGUiVzkrJwX/zOgWb+W/fiH/AI57SHkN6RTHBnE2p8Fmy
# WRnoao0pBAJ3fEtLzXC+OrJVWng+vLtvAxAldxU0ivk2zEOS5LpP8WKTKCVXKftR
# GcehJUBqhFfGsp2xvBwK2nxnfn0u6ShMGH7EezFBcZpLKewLPVdQ0srd/Z4FUeVE
# eN0B3rF1mA1UJP3wTuPi+IO9crrLPTru8F4XkmhtyGH5pvEqCgulufSe7pgyBYWe
# 6/mDKdPGLH29OncuizdCoGqC7TtKqpQQpOEN+BfFtlp5MxiS47V1+KHpjgolHuQe
# 8Z9ahyP/n6RRnvs5gBHN27XEp6iAb+VT1ODjosLSWxr6MiYtaldwHDykWC6j81tL
# B9wyWfOHpxptWDCCBlkwggRBoAMCAQICDQHsHJJA3v0uQF18R3QwDQYJKoZIhvcN
# AQEMBQAwTDEgMB4GA1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjYxEzARBgNV
# BAoTCkdsb2JhbFNpZ24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMTgwNjIwMDAw
# MDAwWhcNMzQxMjEwMDAwMDAwWjBbMQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xv
# YmFsU2lnbiBudi1zYTExMC8GA1UEAxMoR2xvYmFsU2lnbiBUaW1lc3RhbXBpbmcg
# Q0EgLSBTSEEzODQgLSBHNDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB
# APAC4jAj+uAb4Zp0s691g1+pR1LHYTpjfDkjeW10/DHkdBIZlvrOJ2JbrgeKJ+5X
# o8Q17bM0x6zDDOuAZm3RKErBLLu5cPJyroz3mVpddq6/RKh8QSSOj7rFT/82Qaun
# Lf14TkOI/pMZF9nuMc+8ijtuasSI8O6X9tzzGKBLmRwOh6cm4YjJoOWZ4p70nEw/
# XVvstu/SZc9FC1Q9sVRTB4uZbrhUmYqoMZI78np9/A5Y34Fq4bBsHmWCKtQhx5T+
# QpY78Quxf39GmA6HPXpl69FWqS69+1g9tYX6U5lNW3TtckuiDYI3GQzQq+pawe8P
# 1Zm5P/RPNfGcD9M3E1LZJTTtlu/4Z+oIvo9Jev+QsdT3KRXX+Q1d1odDHnTEcCi0
# gHu9Kpu7hOEOrG8NubX2bVb+ih0JPiQOZybH/LINoJSwspTMe+Zn/qZYstTYQRLB
# Vf1ukcW7sUwIS57UQgZvGxjVNupkrs799QXm4mbQDgUhrLERBiMZ5PsFNETqCK6d
# SWcRi4LlrVqGp2b9MwMB3pkl+XFu6ZxdAkxgPM8CjwH9cu6S8acS3kISTeypJuV3
# AqwOVwwJ0WGeJoj8yLJN22TwRZ+6wT9Uo9h2ApVsao3KIlz2DATjKfpLsBzTN3SE
# 2R1mqzRzjx59fF6W1j0ZsJfqjFCRba9Xhn4QNx1rGhTfAgMBAAGjggEpMIIBJTAO
# BgNVHQ8BAf8EBAMCAYYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQU6hbG
# aefjy1dFOTOk8EC+0MO9ZZYwHwYDVR0jBBgwFoAUrmwFo5MT4qLn4tcc1sfwf8hn
# U6AwPgYIKwYBBQUHAQEEMjAwMC4GCCsGAQUFBzABhiJodHRwOi8vb2NzcDIuZ2xv
# YmFsc2lnbi5jb20vcm9vdHI2MDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9jcmwu
# Z2xvYmFsc2lnbi5jb20vcm9vdC1yNi5jcmwwRwYDVR0gBEAwPjA8BgRVHSAAMDQw
# MgYIKwYBBQUHAgEWJmh0dHBzOi8vd3d3Lmdsb2JhbHNpZ24uY29tL3JlcG9zaXRv
# cnkvMA0GCSqGSIb3DQEBDAUAA4ICAQB/4ojZV2crQl+BpwkLusS7KBhW1ky/2xsH
# cMb7CwmtADpgMx85xhZrGUBJJQge5Jv31qQNjx6W8oaiF95Bv0/hvKvN7sAjjMaF
# /ksVJPkYROwfwqSs0LLP7MJWZR29f/begsi3n2HTtUZImJcCZ3oWlUrbYsbQswLM
# NEhFVd3s6UqfXhTtchBxdnDSD5bz6jdXlJEYr9yNmTgZWMKpoX6ibhUm6rT5fyrn
# 50hkaS/SmqFy9vckS3RafXKGNbMCVx+LnPy7rEze+t5TTIP9ErG2SVVPdZ2sb0rI
# Lmq5yojDEjBOsghzn16h1pnO6X1LlizMFmsYzeRZN4YJLOJF1rLNboJ1pdqNHrdb
# L4guPX3x8pEwBZzOe3ygxayvUQbwEccdMMVRVmDofJU9IuPVCiRTJ5eA+kiJJyx5
# 4jzlmx7jqoSCiT7ASvUh/mIQ7R0w/PbM6kgnfIt1Qn9ry/Ola5UfBFg0ContglDk
# 0Xuoyea+SKorVdmNtyUgDhtRoNRjqoPqbHJhSsn6Q8TGV8Wdtjywi7C5HDHvve8U
# 2BRAbCAdwi3oC8aNbYy2ce1SIf4+9p+fORqurNIveiCx9KyqHeItFJ36lmodxjzK
# 89kcv1NNpEdZfJXEQ0H5JeIsEH6B+Q2Up33ytQn12GByQFCVINRDRL76oJXnIFm2
# eMakaqoimzCCBmUwggRNoAMCAQICEAGE06jON4HrV/T9h3uDrrIwDQYJKoZIhvcN
# AQELBQAwWzELMAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2Ex
# MTAvBgNVBAMTKEdsb2JhbFNpZ24gVGltZXN0YW1waW5nIENBIC0gU0hBMzg0IC0g
# RzQwHhcNMjEwNTI3MTAwMDE2WhcNMzIwNjI4MTAwMDE1WjBjMQswCQYDVQQGEwJC
# RTEZMBcGA1UECgwQR2xvYmFsU2lnbiBudi1zYTE5MDcGA1UEAwwwR2xvYmFsc2ln
# biBUU0EgZm9yIE1TIEF1dGhlbnRpY29kZSBBZHZhbmNlZCAtIEc0MIIBojANBgkq
# hkiG9w0BAQEFAAOCAY8AMIIBigKCAYEA4qKbtkn7NEgoIweG/VITTbrLqjXi+UAc
# G3tpxZgqzMlc7yfG7LglZcM/HUTn3uEI7wQXAJWXDP3bXYO0iOugjptPg7r5314Y
# VGoCDg7mVPA3pB6cZzEFtTdxfHp+2IFlM+Sa6rAxN8dmtKO6BSfqblKCWNmCViSN
# +euzFPtkAKF7Kh96nqhjkebY0SLGP9KdOD+vlWlbJ7/oQCSZxx/Ze5IFAn0oxjw5
# 93rN92UmoDevMgV3l2rhEBuYhSyEreUlhnxzns2IjUsqep0PWXm98to2fmasLvi7
# iJfJbXnys9TVzBr0T4tFlXbyh5WAjih5uv3FcK+8GhQCkHwmWxGLXfW65BECxYEc
# ZmhL3mjOnQyIYaq2lCOd4KQ8Rl0EUds/WQvn7L7S2RMqR+9LEhJuyDXP7hYyttBf
# hbhP8nzYCSsSXsDC7xMxcDZz3NZXVNNXYJ4cEJXw5qovEIobfsnNj85QSxwlqMAX
# ZFEVC4zP18ldSmxJdK5a8WoGdT6JNzuRAgMBAAGjggGbMIIBlzAOBgNVHQ8BAf8E
# BAMCB4AwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwHQYDVR0OBBYEFHWvJz+425rs
# bxzuw2pk9r+ENbDOMEwGA1UdIARFMEMwQQYJKwYBBAGgMgEeMDQwMgYIKwYBBQUH
# AgEWJmh0dHBzOi8vd3d3Lmdsb2JhbHNpZ24uY29tL3JlcG9zaXRvcnkvMAkGA1Ud
# EwQCMAAwgZAGCCsGAQUFBwEBBIGDMIGAMDkGCCsGAQUFBzABhi1odHRwOi8vb2Nz
# cC5nbG9iYWxzaWduLmNvbS9jYS9nc3RzYWNhc2hhMzg0ZzQwQwYIKwYBBQUHMAKG
# N2h0dHA6Ly9zZWN1cmUuZ2xvYmFsc2lnbi5jb20vY2FjZXJ0L2dzdHNhY2FzaGEz
# ODRnNC5jcnQwHwYDVR0jBBgwFoAU6hbGaefjy1dFOTOk8EC+0MO9ZZYwQQYDVR0f
# BDowODA2oDSgMoYwaHR0cDovL2NybC5nbG9iYWxzaWduLmNvbS9jYS9nc3RzYWNh
# c2hhMzg0ZzQuY3JsMA0GCSqGSIb3DQEBCwUAA4ICAQA4k7d9NYk06hrWqnrOjYTb
# 4TS3dKX/2F2UNiWP0oB+oWWxm881UV3boEtu9yFALuxPbxZAchx1GzAAFzmPyC+k
# cc4kMyaQ1eT/Oblh7wvKOfMtXo2g/07hVmQf1Jx2BKREXD1ihXAv+U6k94ZW23pJ
# JkMtBZviw4m3OqEtJycYxkOL3EOhtnItP9nGNIoC02I5KfB9KNCpw2SKRm2zQxx0
# i925pgshexGnH12i24zgVdNp+nfRXRS5luyRRRsbbH5CQCSk7UDGZfpBj0gxnOO4
# sxdXgnnKzB7C0E9PBQ4Neddp3ZWhcV2Knudawk+oBg8IiXvbWMglff9ovCiicJy7
# DLVT6I4GsbKCgYcSqV53TJOrGPhEV1gRy/aTFUkxt1NQIdrV/GB/3TDFrFFEC2el
# +tZ3NK0SHyj7iNpRm0Sa3ncO7jISYFYMkZ1Yj7yZV/K+zbnDcyQZ2nem5Ozx3m/g
# vIQdb8Px2+HVQlGGURJCJj7T6hP0KJytTXq3oroUaj9AVVhOjGUcs/Z11n+uD4SA
# L76IeFwnH0cXwj3kaZ7Lrp7vAmiINxDCbCaKyIxlkFNNrl3auEYQ1JAKiv/0KECB
# 4FLI8gFkSBiEeGoi+sqcqg4dxY5ywzYiGev4lB+/wsUBVummgOoBHRM1B+K5dBT9
# mjieA9JJ9kzrob0cFNLjmTGCBX8wggV7AgEBMIGRMHwxCzAJBgNVBAYTAkdCMRsw
# GQYDVQQIExJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAOBgNVBAcTB1NhbGZvcmQxGDAW
# BgNVBAoTD1NlY3RpZ28gTGltaXRlZDEkMCIGA1UEAxMbU2VjdGlnbyBSU0EgQ29k
# ZSBTaWduaW5nIENBAhEA6EYzLb7R2bgb4DfZjiC8nDANBglghkgBZQMEAgEFAKBM
# MBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMC8GCSqGSIb3DQEJBDEiBCCHw01Z
# dJtc1ZrXgq/U1Er3oPV96PqMnkaATcyPeWUETjANBgkqhkiG9w0BAQEFAASCAQBF
# gVGXK41Z0n0JEVx+chEyculQxFyfxnPEwy26EPaRWUvCaVTWZDPJKVznmmSmAlVK
# M0VdKpajY/57PUbzQ87hYyEHP8OfP0W1gwz2kYgYC2Pz0HrO7KwENz9NG32eJ/lI
# rbSL4IweR+zMnLkpH1R+kTcMXDSXE0kFctvc0zBnHYAF8GN9E3L3S29QLFC6nl4D
# 0WHjlxTngzeecXtI64EK2IjhcICLPoonjDJFeDHoh8PuV90c94IUI7Ky2mDTFZ1v
# nHd6yxNokrg0yo+sfFWomY15F6aYxYEyf8TPk6/NgTbmPee3Z4yr/+RmsvlyVhsh
# z2jit8Ye1X8rFn1majzmoYIDcDCCA2wGCSqGSIb3DQEJBjGCA10wggNZAgEBMG8w
# WzELMAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExMTAvBgNV
# BAMTKEdsb2JhbFNpZ24gVGltZXN0YW1waW5nIENBIC0gU0hBMzg0IC0gRzQCEAGE
# 06jON4HrV/T9h3uDrrIwDQYJYIZIAWUDBAIBBQCgggE/MBgGCSqGSIb3DQEJAzEL
# BgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTIyMDEyMzAzNTc1NVowLQYJKoZI
# hvcNAQk0MSAwHjANBglghkgBZQMEAgEFAKENBgkqhkiG9w0BAQsFADAvBgkqhkiG
# 9w0BCQQxIgQg7EtQEBbfRP00O9rVH82qID5DPTNK4kPQNeF0dUFDJjgwgaQGCyqG
# SIb3DQEJEAIMMYGUMIGRMIGOMIGLBBTdV7WzhzyGGynGrsRzGvvojXXBSTBzMF+k
# XTBbMQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xvYmFsU2lnbiBudi1zYTExMC8G
# A1UEAxMoR2xvYmFsU2lnbiBUaW1lc3RhbXBpbmcgQ0EgLSBTSEEzODQgLSBHNAIQ
# AYTTqM43getX9P2He4OusjANBgkqhkiG9w0BAQsFAASCAYCc5NrJbmyNA6jw8Hde
# eVYBGQkE89NUjP66WLudVpKtvl/P7X47KhE3FMbKF/dCBNjkCy6n8jurvXk4FzYm
# pZUxPrfIBS6pM43eSHR018esUS4WPShHXMh8RXR4iGNeH2G+GpxkIiKekhfurMSW
# em9xcxrRQmuuBYf+C8fdeNYTzyMh51Hke/alsf3K7M6RJLBQK+07fSWPpyHitYTF
# JSCw5l6yANpGDH03wbu3QIPj1Vh6HhiDYbelc5FIEnRrQ6wDnnMmTx8n/sI3YSpA
# l9YKEcIsE1aVHw8y5hM+iCU2OHpVFRs//42KbL5IAYvm9P7/QlaFObyDEmL35klT
# KfHUefaO4EGameQ3ZmQriuCQAURNKsyucWpmaPawgWb6FnBL52LpEjes5pf5YSe0
# 7lm9henhXFMz2HNWJ3I27m1lHLRD87GCrItyVAiVtJFW667xZhzoIxdtRBcOWlGD
# G95l9gtHcNYurSYlbmbTFiAEbKaGxEMUuhyMQsui0Y5ePzk=
# SIG # End signature block
